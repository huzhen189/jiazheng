{"version":3,"sources":["qiniu-input.js"],"names":["QiniuFileInput","config","defaultConfig","max","accept","size","Object","assign","init","Vue","el","data","progress","errMessage","imageList","mounted","item","push","name","methods","setErrMessage","str","upload","event","totalLength","target","files","length","bigImages","FormData","append","token","getFileKey","requestQiniu","url","error","r","message","success","res","onsuccess","cdnUrl","key","p","setTimeout","parseInt","deleteImg","index","ondelete","splice","len","x","tmp","i","charAt","Math","ceil","random","obj","xhr","XMLHttpRequest","open","addEventListener","evt","floor","loaded","total","onreadystatechange","response","readyState","status","responseText","JSON","parse","send","oDate","Date","getFullYear","getMonth","randomChar","split"],"mappings":"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","file":"qiniu-input.js","sourcesContent":["class QiniuFileInput{\r\n\r\n    constructor(config)\r\n    {\r\n        let defaultConfig = {\r\n            max : 3,\r\n            accept: \"image/jpeg,image/gif,image/png\",\r\n            size:204800\r\n        };\r\n        this.config = Object.assign(defaultConfig,config);\r\n        this.init();\r\n    }\r\n    static randomChar(len = 5)\r\n    {\r\n        let  x= \"0123456789qwertyuioplkjhgfdsazxcvbnm\";\r\n        let  tmp=\"\";\r\n        for(let i=0; i< len; i++) {\r\n            tmp += x.charAt(Math.ceil(Math.random() * 100000000) % x.length);\r\n        }\r\n        return tmp;\r\n    }\r\n    static requestQiniu(obj)\r\n    {\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", obj.url, true);\r\n        xhr.upload.addEventListener(\"progress\",  (evt)=>{\r\n            let p = Math.floor(evt.loaded / evt.total * 100);\r\n            typeof obj.progress === \"function\" && obj.progress(p);\r\n        });\r\n        xhr.onreadystatechange = (response)=>{\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200 && xhr.responseText !== '') {\r\n                    let r = JSON.parse(xhr.responseText);\r\n                    typeof obj.success === \"function\" && obj.success(r);\r\n                }\r\n                if (xhr.status !== 200) {\r\n                    typeof obj.error === \"function\" && obj.error({\r\n                        message: JSON.parse(xhr.responseText).error,\r\n                        status: xhr.status\r\n                    });\r\n                }\r\n            }\r\n\r\n        };\r\n        xhr.send(obj.data);\r\n    }\r\n    static getFileKey(item,len=10)\r\n    {\r\n        let oDate = new Date();\r\n        return `${oDate.getFullYear()}/${oDate.getMonth()+1}/${QiniuFileInput.randomChar(len)}.${item.name.split('.').splice(-1)}`;\r\n    }\r\n    init()\r\n    {\r\n        new Vue({\r\n            el : this.config.el,\r\n            data : {\r\n                progress:0,\r\n                errMessage : '',\r\n                config : this.config,\r\n                imageList:[]\r\n            },\r\n            mounted(){\r\n                if (this.config.imageList != null) {\r\n                    for (let item of this.config.imageList) {\r\n                        this.imageList.push({\r\n                            name:item\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n            methods:{\r\n                setErrMessage(str=''){\r\n                    this.errMessage = str;\r\n                },\r\n                upload(event)\r\n                {\r\n                    let totalLength = event.target.files.length + this.imageList.length;\r\n                    if (totalLength > this.config.max){\r\n                        this.setErrMessage(`图片超出最大允许上传个数:${this.config.max},请删除一些图片!`);\r\n                        return;\r\n                    }\r\n                    let bigImages = '';\r\n                    for (let item of event.target.files) {\r\n                        if (item.size > this.config.size){\r\n                            bigImages += `${item.name}  `;\r\n                            continue;\r\n                        }\r\n                        let data = new FormData();\r\n                        data.append(\"file\", item);\r\n                        data.append(\"token\", this.config.token);\r\n                        data.append(\"key\",QiniuFileInput.getFileKey(item));\r\n                        QiniuFileInput.requestQiniu({\r\n                            url:this.config.url,\r\n                            data : data,\r\n                            error:(r)=>{\r\n                                this.setErrMessage(r.message);\r\n                            },\r\n                            success:(res)=>{\r\n                                typeof this.config.onsuccess === \"function\" && this.config.onsuccess(res);\r\n                                this.imageList.push({\r\n                                    name:`${this.config.cdnUrl}/${res.key}`\r\n                                });\r\n                            },\r\n                            progress:(p)=>{\r\n                                if ( p === 100 ) {\r\n                                    setTimeout(()=>{\r\n                                        this.progress = 0;\r\n                                    },500)\r\n                                }\r\n                                this.progress = p;\r\n                            }\r\n                        });\r\n                    }\r\n                    if (bigImages !== ''){\r\n                        this.setErrMessage(`${bigImages}超出最大限制${parseInt(this.config.size/1024)}KB,已忽略上传`)\r\n                    }\r\n                },\r\n                deleteImg(index){\r\n                    typeof this.config.ondelete === \"function\" && this.config.ondelete(this.imageList[index]);\r\n                    this.imageList.splice(index,1);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}"]}